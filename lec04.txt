Lecture 4
---------

{- Notational update - from now on we write an infix period instead of
an infix o for arrow composition. -}

Recall:

The product of X and Y is the terminal object in Span(X, Y).

We obtained:

1. (Universal property)


   For all (f : Z -> X, g : Z -> Y) there exists a unique arrow

           Span(X, Y)
   (f, g) ------------> (fst, snd)

   i.e. there exists a unique arrow _in C_, denoted f ^ g, such that

   fst . f ^ g = f   and   snd . f ^ g = g

2. (Reflection) fst ^ snd = id

3. (Fusion) f ^ g . h = (f . h) ^ (g . h)


The product functor
-------------------

Let C be a category such that X x Y exists for all X, Y (i.e., C "has
products").

Consider the mapping

    (x) : C x C -> C
    (x) (X, Y) = X x Y

How should (x) act on arrows?

    (A, B)             A x B
     |  |                |
    f|  |g               | f x g
     |  |                |
     v  v                v
    (C, D)             C x D

In FUN it's obvious:

    (f x g) (a, b) = (f a, g b)

but we want a definition that works in _any_ category with products.

The _only_ way we can define something in this generality is to make
use of the universal property, i.e., to find two arrows with types

    h : AxB -> C and k : AxB -> D

and define fxg = h^k.

We basically have only one choice:

    f x g = (f . fst) ^ (g . snd)

Is this a functor?

    (x) id_(A, B)
  =  { definition of id in C x C }
    id_A x id_B
  =  { definition of x }
    (id_A . fst) ^ (id_B . snd)
  =  { id }
    fst ^ snd
  =  { reflection }
    id

    (f x g) . (h x k)
  =  { definition x }
    ((f . fst)^(g . snd)) . (h x k)
  =  { fusion }
    (f . fst . h x k) ^ (g . snd . h x k)
  =  { definition of x }
    (f . fst . (h . fst ^ k . snd)) ^ (g . snd . (h . fst ^ k . snd))
  =  { universal property }
    (f . h . fst) ^ (g . k . snd)
  =  { definition x }
    (f . h) x (g . k)

Exercise
--------

  Prove the "x . ^" fusion law:

    f x g . h ^ k = (f . h) ^ (g . k)

Remarks
-------

  1.  As usual, these results can be dualized, obtaining the coproduct
  functor.  To establish notation, we spell out some of the elements:

      The coproduct of X and Y is the initial object in the category
      Cospan(X, Y) and is denoted by
            (inl : X -> X + Y, inr : Y -> X + Y)
      The universal property is
            For all (f : X -> Z, g : Y -> Z) there exists a unique
            arrow denoted f v g : X + Y -> Z such that

            f v g . inl = f    and    f v g . inr = g

      The coproduct functor is defined by

            (+) : C x C -> C
            (+) (X, Y) = X + Y
            (+) (f, g) = (inl . f) v (inr . g)

      The "v . +" fusion law is

            f v g . h + k = (f . h) v (g . k)

    2.  In Haskell, the product of X and Y is denoted "(X, Y)" and the
    coproduct "Either X Y". Note that the Haskell notation (X, Y) for
    product types is best avoided in category theory to avoid
    confusion.

    The "pair" combinator (^) is not defined in the standard prelude,
    but "case" (v) is, and is called "either".  Neither (+) nor (x)
    can be instances of "Functor".


Exponentials
------------

We want to represent "exponentials", i.e. function spaces, in a
categorical way.  (The name comes from the notation A^B for B -> A,
which in turn is due to cardinality considerations.)

The main feature of an element f : A^B is that given a (b : B) I can
use it to produce an element of A (by applying f to b), in other words
the operation

    apply : A^B x B -> A

To characterize this arrow, we construct a category of "similar"
arrows (therefore also a notion of morphism between such arrows) and
define "apply" to be the initial or terminal arrow in that category.

We define the category Exp(A, B):

    objects: arrows in C of the form X x B -> A
    arrows:  an arrow from f : X x B -> A to g : Y x B -> A
             is an arrow h : X -> Y in C such that
                g . (h x id_B) = f

It is not difficult to see that we need to define apply as the
_terminal_ object in Exp(A, B).

Definition:  The exponential of A and B is the terminal object in
Exp(A, B).

We now proceed, as always, to translate from the properties of
terminal objects.

1. Universal property.

   For every f : X x B -> A there exists a unique arrow 1_f : f ->
   apply in Exp(A, B), that is, a unique arrow 1_f : X -> A^B in C
   such that
      apply . (1_f x id) = f

   Remark: 1_f is usually denoted "curry f".

2. Reflection.

     1_apply = id_1, i.e.

     curry apply = id_{A^B}

3. Fusion.

   In Exp(A, B), for any h : (f : X x B -> A) -> (g : Y x B -> A) we
   have  1_g . h = 1_f

   Translating, we obtain

     curry g . h = curry f
  <=>  { h : f -> g in Exp(A, B) implies g . (h x id) = f }
     curry g . h = curry (g . (h x id))

Remark
------

    It is important to distinguish between Hom(A, B) and B^A.  The
    first is always an object in FUN, i.e., a set; the second is an
    object in C. Every category has Hom-sets for all objects A and B,
    but only some categories has exponentials.

Functors and datatypes
----------------------

Basically, every type constructor in Haskell defines a functor,
though, as we've seen, not always one which can be expressed as an
instance of the typeclass Functor. (For this presentation we will work
with an idealised subset of Haskell where all values are total, thus
ignoring error values and non-termination.)

For example:

> data D a b c = C0 | C1 a b | C2 (Nat -> c)

The type constructor D takes three types and constructs a new type,
consisting of

     o  a given element, C0
     o  pairs of elements, an "a" and a "b", labelled with C1
     o  functions Nat -> c, labelled with C2

Therefore, the datatype is isomorphic to the disjoint sum of a
singleton, the cartesian product a x b, and the function space Nat -> c:

  F : C x C x C -> C
  F (a, b, c) = 1 + a x b + (Nat -> c)

  F (f, g, h) = id_1 + f x g + (h .)

We have D a b c ~ F (a, b, c), the isomorphism is witnessed by

  C0 v (C1 v C2) : F (a, b, c) -> D a b c

where we have identified the element C0 of D a b c with the
correspoding "generalized element" 1 -> D a b c.

In fact, we can consider that this isomorphism _defines_ D a b c,
since, via pattern matching, everytime we get an element of D a b c we
can resolve it to either C0, or to an element of a x b, or to an
element of a -> c, and those elements are what we work with.

We prefer the uncurried representation of F to the more literal
translation

  F : C -> C -> C -> C

which would require us to work with functor categories.

Exercise: replace "Nat" in the declaration of D with another
parameter, d.  Define the corresponding functor.  What if we had
replaced Nat by "a"?

Recursive datatypes and F-algebras
----------------------------------

The Peano natural numbers can be defined in Haskell as

> data Nat = Z | S Nat

Nat consists of

    o  a given element, Z;
    o  for every element n : Nat, a new element of Nat, labelled with
       S, i.e., "S n".

That is, Nat is isomorphic to the disjoint sum of 1 and Nat:

    Nat ~ 1 + Nat

The isomorphism is witnessed by

    Z v S : 1 + Nat -> Nat

but, as opposed to the previous case of the datatype D a b c, we can
no longer take this isomorphism to define Nat.  In FUN, for example,
the existence of this isomorphism only tells us that Nat is infinite;
the set of real numbers and the set of classical natural numbers both
fit the bill, and are not themselves isomorphic.

Set-theoretically, in order to obtain the Peano natural numbers, we
add the constraint of _minimality_: Nat is the smallest set for which
such an isomorphism exists, i.e., the smallest set for which

   X ~ F X where F X = 1 + X

Remark: an X for which X ~ F X is called a _fixed_point_ of F.

Given our previous discussion, one could expect that in order to
obtain a categorical definition of Nat we construct a category in
which the objects are the fixed points of F, or rather, isomorphisms
F X -> X (such as Z v S) and the arrows functions that preserve the
isomorphisms; and that Nat would be the initial object ("smallest") in
this category.  This is almost correct!  It turns out, we can afford a
slightly more generous (and more useful) category by dropping the
condition that F X -> X is an isomorphism.

Definition: Given a category C and a functor F : C -> C, an
            _F-algebra_ is an arrow F X -> X in C.  The object X is
            called the _carrier_ of the algebra.

The notion of F-algebra represents the categorical version of
"algebra" (as defined in universal algebra).

A morphism from an F-algebra f1 : F X1 -> X1 to f2 : F X2 -> X2
is an arrow f : X1 -> X2 such that

           f1
    F X1 --------> X1
     |             |
 F f |             | f            f . f1 = f2 . F f
     |             |
     v             v
    F X2 --------> X2
           f2

Remark: for algebraic structures such as monoids, groups, etc., these
morphism give the standard homomorphisms.  See, e.g., Hutton's notes.

We can define now the category Alg(F):

    o  objects: F-algebras
    o  arrows:  morphisms of F-algebras

The set-theoretical smallest fixed point then turns out to correspond
to the initial object in Alg(F).

Notation: the initial algebra is usually denoted by "in" and its
carrier by "uF" (in Latex $\mu\ F$).

    in : F uF -> uF

Examples:

    o  Z v S : 1 + Nat -> Nat is the initial algebra of
           F X = 1 + X
           F f = id_1 + f

       In Haskell-like terms

           F f : Either () X -> Either () Y
           F f (Left ()) = Left ()
           F f (Right x) = Right (f x)


    o  Nil v Cons : 1 + A x List A -> List A is the initial algebra of
          F X = 1 + A x X
          F f = id_1 + id_A x f

       In Haskell-like terms

          F f : Either () (A, X) -> Either () (A, Y)
          F f (Left ())      = Left ()
          F f (Right (a, x)) = Right (a, f x)

       Note: this should not be confused with "map" for lists!

    o  Tip v Bin : A + Tree A x Tree A -> Tree A is the initial
       algebra of
          F X = A + X x X
          F f = id_A + f x f

       In Haskell-like terms

          F f : Either A (X, X) -> Either A (Y, Y)
          F f (Left a)         = Left a
          F f (Right (x1, x2)) = Right (f x1, f x2)

(end of examples, back to main thread)

However, while "smallest" might be considered covered by initiality,
we still need to prove that the initial algebra is an isomorphism.
Before doing that, we perform the usual translation, this time from
Alg(F) to C.

1. Universal property

   For all f in Alg(C) there exists a unique arrow 0_f : in -> f
   in Alg(C)

  <=>  { definition of objects and arrows in Alg(C) }

   For all f : F X -> X in C there exists
   a unique arrow 0_f : uF -> X such that 0_f . in = f . F 0_f

   The usual notation for 0_f is "([ f ])", i.e., "banana brackets".
   I'll write "fold f", which is the current standard in computing.

   Therefore, the universal property of initial algebras is
        +---------------------------------------------------+
        |for every f : F X -> X there exists a unique arrow |
        |fold f : uF -> X such that                         |
        |                                                   |
        |     fold f . in = f . F (fold f)                  |
        +---------------------------------------------------+


   Examples:

        o  for Nat, we have in = Z v S and F X = 1 + X

              f : 1 + X -> X
           =>  { introducing e = f . inl, g = f . inr }
              f = e v g

              fold (e v g) . (Z v S)
           =   { fold universal property with f = e v g and in = Z v S}
              (e v g) . F (fold (e v g))
           =   { definition of F }
              (e v g) . (id_1 + fold (e v g))
           =   { v . + fusion }
              e v (g . fold (e v g))                    (*)

           and we also have

              fold (e v g) . (Z v S)
           =   { v fusion }
              (fold (e v g) . Z) v (fold (e v g) . S)   (**)

           Using (*) = (**) and { f v g = h v k  <=>  f = h & g = k } we get

               fold (e v g) . Z = e                  &
               fold (e v g) . S = g . fold (e v g)

           In Haskell-like terms:

               fold e g Z     = e
               fold e g (S n) = g (fold e g n)

           Example: plus n = fold n S

        o  for List A we have in = Nil v Cons and F X = 1 + A x X

               f : 1 + A x X -> X
            =>  { introducing e = f . inl and g = f . inr }
               f = e v g

               fold (e v g) . (Nil v Cons)
            =   { v fusion }
               (fold (e v g) . Nil) v (fold (e v g) . Cons)     (*)
            =   { step back and use fold universal property }
               (e v g) . F (fold (e v g))
            =   { definition F }
               (e v g) . (id_1 + id_A x (fold (e v g)))
            =   { v . + fusion }
               e v (g . (id_A x (fold (e v g))))                (**)

               (*) = (**)
            =>  { f v g = h v k <=> f = h and g = k }
               fold (e v g) . Nil  = e
               fold (e v g) . Cons = g . (id_A x (fold (e v g)))

           In Haskell-like terms:

               fold e g Nil         = e
               fold e g (Cons a as) = g (a, fold e g as)

           Example:

               sum  = fold 0 (+)
               (++) = fold id f where f (a, g) = Cons a . g

Exercise: work out the definition of fold for Tree.
